{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\ndt_right_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\ndt_right_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\ndt_right = MotorGroup(dt_right_motor_a, dt_right_motor_b)\ndt_left_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\ndt_left_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\ndt_left = MotorGroup(dt_left_motor_a, dt_left_motor_b)\norientation = Inertial(Ports.PORT16)\nwings = DigitalOut(brain.three_wire_port.a)\nintake = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nendgame_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nendgame_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nendgame = MotorGroup(endgame_motor_a, endgame_motor_b)\ncatapult = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n# setup + calibration\nimport time\norientation.calibrate()\ntime.sleep(3)\norientation.set_rotation(90, DEGREES)\norientation.set_heading(90, DEGREES)\nclass Components:\n    def __init__(self, endgame_ratio, cata_speed):\n        self.endgame_ratio = endgame_ratio\n        catapult.set_velocity(cata_speed, PERCENT)\n        self.wing_value = False\n        wings.set(False)\n    def intake(self, direction):\n        if direction == None:\n            intake.stop()\n        else:\n            intake.spin(direction)\n    def endgame(self, direction, amount=None):\n        endgame.set_velocity(25 if direction == FORWARD else 100, PERCENT)\n        if direction == None:\n            endgame.stop()\n        elif amount == None:\n            endgame.spin(direction)\n        else:\n            d = FORWARD if ((1 if direction == FORWARD else -1)*(1 if amount>=0 else -1)) == 1 else REVERSE\n            endgame.spin_for(d, abs(amount)*self.endgame_ratio, TURNS)\n    def catapult(self, amount=None):\n        if amount == None:\n            catapult.spin(FORWARD)\n        else:\n            catapult.spin_for(FORWARD, abs(amount), TURNS)\n    def wings(self):\n        self.wing_value = False if self.wing_value else True\n        wings.set(self.wing_value)\nclass Drivetrain:\n    def __init__(self, gear_cartridge, gear_ratio, wheel_diameter):\n        self.gear_cartridge = gear_cartridge\n        self.gear_ratio = gear_ratio\n        self.wheel_diameter = wheel_diameter\n    def drive4(self, inches, speed=125, timeout=2.5):\n        dt_left.set_timeout(15)\n        dt_right.set_timeout(15)\n        dt_left.set_velocity(speed/2, PERCENT)\n        dt_right.set_velocity(speed/2, PERCENT)\n        direction = FORWARD if inches > 0 else REVERSE\n        dt_left.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        dt_right.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        old_time = brain.timer.time(SECONDS)\n        while dt_left.is_spinning() or dt_right.is_spinning():\n            if brain.timer.time(SECONDS)-old_time >= timeout:\n                dt_left.stop()\n                dt_right.stop()\n    def turn2(self, angle, speed=30):\n        while abs(angle - orientation.heading(DEGREES)) % 360 > 0.5:\n            h = orientation.heading(DEGREES)\n            dt_left.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_right.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            if (angle - h + 180) % 360 - 180 > 0:\n                # turn right\n                dt_left.spin(FORWARD)\n                dt_right.spin(REVERSE)\n            else:\n                # turn left\n                dt_left.spin(REVERSE)\n                dt_right.spin(FORWARD)\n            wait(15, MSEC)\n        print(orientation.heading(DEGREES))\n        dt_left.stop()\n        dt_right.stop()\n        if abs(angle - orientation.heading(DEGREES)) % 360 > 0.5:\n            self.turn2(angle, speed=10)\ndt = Drivetrain(1/18, 48/72, 4)\ncp = Components(96/12, 60)\n# driver control\ndef autonomous():\n    WING_DELAY = 250\n    # let's pretend that the code for preloads & matchloading is all done!\n    # preload\n    dt.turn2(40)\n    dt.drive4(-22)\n    dt.turn2(90)\n    dt.drive4(-8, timeout=1)\n    dt.turn2(90)\n    dt.drive4(13)\n    dt.turn2(338)\n    dt.drive4(-6, timeout=1)\n    dt.turn2(347)\n    # match load\n    catapult.set_velocity(60, PERCENT)\n    # rotations = 44 (set to 4 for faster testing)\n    cp.catapult(44)\n    # side RIGHT\n    dt.drive4(6)\n    dt.turn2(180+35)\n    dt.drive4(-24, timeout=1)\n    dt.turn2(180)\n    dt.drive4(-68/2)\n    dt.turn2(180)\n    dt.drive4(-68/2)\n    dt.turn2(135)\n    dt.drive4(-28)\n    dt.turn2(90)\n    dt.drive4(3)\n    dt.drive4(-100, speed=150, timeout=1)\n    # 45˚ RIGHT\n    dt.drive4(3)\n    dt.turn2(180)\n    dt.drive4(48)\n    dt.turn2(360-50)\n    cp.wings()\n    wait(WING_DELAY, MSEC)\n    dt.drive4(300, speed=150, timeout=1)\n    # 45˚ LEFT\n    cp.wings()\n    dt.turn2(0)\n    dt.drive4(-48, timeout=1)\n    dt.turn2(270)\n    dt.drive4(24)\n    dt.turn2(35)\n    cp.wings()\n    wait(WING_DELAY, MSEC)\n    dt.drive4(1000, speed=150, timeout=1)\n    dt.turn2(0)\n    dt.drive4(1000, speed=150, timeout=1)\n    dt.drive4(-24)\n    print(brain.timer.time(SECONDS))\n#competition = Competition(lambda: None, autonomous)\nautonomous()","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[12,11],"name":"dt_right","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[19,20],"name":"dt_left","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[16],"name":"orientation","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"wings","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[9],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1,10],"name":"endgame","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[8],"name":"catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":3,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}