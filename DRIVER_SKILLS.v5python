{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\ndt_right_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\ndt_right_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\ndt_right = MotorGroup(dt_right_motor_a, dt_right_motor_b)\ndt_left_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\ndt_left_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\ndt_left = MotorGroup(dt_left_motor_a, dt_left_motor_b)\norientation = Inertial(Ports.PORT16)\nwings = DigitalOut(brain.three_wire_port.a)\nintake = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nendgame_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nendgame_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nendgame = MotorGroup(endgame_motor_a, endgame_motor_b)\ncatapult = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n# setup + calibration\nimport time\norientation.calibrate()\ntime.sleep(2)\norientation.set_rotation(0, DEGREES)\norientation.set_heading(0, DEGREES)\nclass Components:\n    def __init__(self, endgame_ratio, cata_speed):\n        self.endgame_ratio = endgame_ratio\n        catapult.set_velocity(cata_speed, PERCENT)\n        self.wing_value = False\n        wings.set(False)\n    def intake(self, direction):\n        if direction == None:\n            intake.stop()\n        else:\n            intake.spin(direction)\n    def endgame(self, direction, amount=None):\n        endgame.set_velocity(25 if direction == FORWARD else 100, PERCENT)\n        if direction == None:\n            endgame.stop()\n        elif amount == None:\n            endgame.spin(direction)\n        else:\n            d = FORWARD if ((1 if direction == FORWARD else -1)*(1 if amount>=0 else -1)) == 1 else REVERSE\n            endgame.spin_for(d, abs(amount)*self.endgame_ratio, TURNS)\n    def catapult(self, amount=None):\n        if amount == None:\n            catapult.spin(FORWARD)\n        else:\n            catapult.spin_for(FORWARD, abs(amount), TURNS)\n    def wings(self):\n        self.wing_value = False if self.wing_value else True\n        wings.set(self.wing_value)\nclass Drivetrain:\n    def __init__(self, gear_cartridge, gear_ratio, wheel_diameter):\n        self.gear_cartridge = gear_cartridge\n        self.gear_ratio = gear_ratio\n        self.wheel_diameter = wheel_diameter\n    def drive4(self, inches, speed=50, timeout=15):\n        dt_left.set_timeout(15)\n        dt_right.set_timeout(15)\n        dt_left.set_velocity(speed/2, PERCENT)\n        dt_right.set_velocity(speed/2, PERCENT)\n        direction = FORWARD if inches > 0 else REVERSE\n        dt_left.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        dt_right.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS)\n    def turn2(self, angle, speed=50):\n        while abs(angle - orientation.heading(DEGREES)) % 360 > 0.5:\n            h = orientation.heading(DEGREES)\n            print(h)\n            dt_left.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_right.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            if (angle - h + 180) % 360 - 180 > 0:\n                # turn right\n                dt_left.spin(FORWARD)\n                dt_right.spin(REVERSE)\n            else:\n                # turn left\n                dt_left.spin(REVERSE)\n                dt_right.spin(FORWARD)\n        dt_left.stop()\n        dt_right.stop()\ndt = Drivetrain(1/18, 48/72, 4)\ncp = Components(96/12, 60)\n# driver control\ndef driver_control():\n    controller_1.buttonL2.pressed(lambda: cp.wings())\n    controller_1.buttonR2.pressed(lambda: cp.wings())\n\n    controller_1.buttonL1.pressed(lambda: cp.intake(FORWARD))\n    controller_1.buttonR1.pressed(lambda: cp.intake(REVERSE))\n    controller_1.buttonL1.released(lambda: cp.intake(None))\n    controller_1.buttonR1.released(lambda: cp.intake(None))\n\n    controller_1.buttonUp.pressed(lambda: cp.endgame(FORWARD))\n    controller_1.buttonDown.pressed(lambda: cp.endgame(REVERSE))\n    controller_1.buttonUp.released(lambda: cp.endgame(None))\n    controller_1.buttonDown.released(lambda: cp.endgame(None))\n\n    while True:\n        dt_left_speed = controller_1.axis3.position() + controller_1.axis1.position()\n        dt_right_speed = controller_1.axis3.position() - controller_1.axis1.position()\n        if dt_left_speed == 0:\n            dt_left.stop()\n        else:\n            dt_left.set_velocity(abs(dt_left_speed), PERCENT)\n            dt_left.spin(FORWARD if dt_left_speed > 0 else REVERSE)\n        if dt_right_speed == 0:\n            dt_right.stop()\n        else:\n            dt_right.set_velocity(abs(dt_right_speed), PERCENT)\n            dt_right.spin(FORWARD if dt_right_speed > 0 else REVERSE)\n#competition = Competition(driver_control, lambda: None)\ndriver_control()","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[12,11],"name":"dt_right","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[19,20],"name":"dt_left","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[16],"name":"orientation","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"wings","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[9],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1,10],"name":"endgame","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[8],"name":"catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}