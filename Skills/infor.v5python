{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nimport time\nimport math\nimport random\n# Robot configuration\ncontroller_1 = Controller(PRIMARY)\n# drivetrain\ndt_left = MotorGroup(\n    Motor(Ports.PORT20, GearSetting.RATIO_6_1, True),\n    Motor(Ports.PORT19, GearSetting.RATIO_6_1, True),\n    Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\n)\ndt_right = MotorGroup(\n    Motor(Ports.PORT11, GearSetting.RATIO_6_1, False),\n    Motor(Ports.PORT12, GearSetting.RATIO_6_1, False),\n    Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)\n)\n\ndt_left.set_stopping(BRAKE) \ndt_right.set_stopping(BRAKE)\n# inertial & solenoid\norientation = Inertial(Ports.PORT1)\nwings = DigitalOut(brain.three_wire_port.a)\nendg = DigitalOut(brain.three_wire_port.b)\n# components\nintake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\ncatapult = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\n# initialize everything\norientation.calibrate()\n\nclass Drivetrain:\n    def turn2(self, angle_unmodded, speed=30):\n        angle = angle_unmodded % 360\n        while abs(angle - orientation.heading(DEGREES)) % 360 > 1:\n            h = orientation.heading(DEGREES)\n            #print(h)\n            dt_left.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_right.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_left.spin(FORWARD if (angle - h + 180) % 360 - 180 > 0 else REVERSE)\n            dt_right.spin(REVERSE if (angle - h + 180) % 360 - 180 > 0 else FORWARD)\n            wait(10, MSEC)\n        dt_left.stop()\n        dt_right.stop()\n        if abs(angle - orientation.heading(DEGREES)) % 360 > 1:\n            self.turn2(angle, speed=10)\ndt = Drivetrain()\nbrain.timer.clear()\ncontroller_1.screen.set_cursor(1, 1)\ncontroller_1.screen.print(\"DT Temps\")\n\ncontroller_1.screen.set_cursor(2, 1)\ncontroller_1.screen.print(\"Cata\")\n\ncontroller_1.screen.set_cursor(3, 1)\ncontroller_1.screen.print(\"Inertial\")\nstarted = True\nwhile True:\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"dt: \" + str(dt_left.temperature(PERCENT)) + \" \" + str(dt_right.temperature(PERCENT)))\n    controller_1.screen.set_cursor(2, 1)\n    controller_1.screen.print(\"cata: \" + str(catapult.temperature(PERCENT)))\n    controller_1.screen.set_cursor(3, 1)\n    controller_1.screen.print(\"inertial: \" + str(orientation.heading(DEGREES)))\n    if controller_1.buttonDown.pressing() and started:\n        started = False\n        for i in range(1000):\n            orientation.set_heading(0, DEGREES)\n            dt.turn2(90)\n            wait(100, MSEC)","textLanguage":"python","rconfig":[],"slot":4,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}