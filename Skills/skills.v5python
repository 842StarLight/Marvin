{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nimport time\nimport math\nimport random\ndef sign(x):\n    if x == 0:\n        return 0\n    else:\n        return 1 if x > 0 else -1\n# Robot configuration\ncontroller_1 = Controller(PRIMARY)\n\nclass Components:\n    def __init__(self, endgame_ratio, cata_speed):\n        self._wing1 = DigitalOut(brain.three_wire_port.a)\n        self._wing2 = DigitalOut(brain.three_wire_port.b)\n        self.wing_value = False\n        self._wing1.set(True)\n        self._wing2.set(False)\n\n        self._intake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\n        self._intake.set_velocity(200, PERCENT)\n        self.intake_value = None \n\n        self._catapult = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False) \n        self._catapult.set_velocity(cata_speed, PERCENT)\n    def intake(self, direction):\n        if direction == None:\n            self._intake.stop()\n        else:\n            self._intake.spin(direction)\n        self.intake_value = direction\n    def catapult(self, direction=FORWARD):\n        if direction == None:\n            self._catapult.stop()\n        else:\n            self._catapult.spin(direction)\n    def wings(self):\n        self.wing_value = not self.wing_value\n        self._wing1.set(not self.wing_value)\n        self._wing2.set(self.wing_value)\ncp = Components(80/12, 75)\n\nclass Drivetrain:\n    def __init__(self, initial_angle, gear_ratio, wheel_diameter):\n        self.gear_ratio = gear_ratio\n        self.wheel_diameter = wheel_diameter\n        self._dt_left = MotorGroup(\n            Motor(Ports.PORT11, GearSetting.RATIO_6_1, False),\n            Motor(Ports.PORT12, GearSetting.RATIO_6_1, False),\n            Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)\n        )\n        self._dt_right = MotorGroup(\n            Motor(Ports.PORT18, GearSetting.RATIO_6_1, True),\n            Motor(Ports.PORT19, GearSetting.RATIO_6_1, True),\n            Motor(Ports.PORT20, GearSetting.RATIO_6_1, True)\n        )\n\n        self._dt_left.set_stopping(BRAKE)\n        self._dt_right.set_stopping(BRAKE)\n\n        self._dt_left.set_velocity(0, PERCENT)\n        self._dt_right.set_velocity(0, PERCENT)\n\n        self._dt_left.spin(FORWARD)\n        self._dt_right.spin(FORWARD)\n\n        self.orient = Inertial(Ports.PORT7)\n        self.orient.calibrate()\n        while self.orient.is_calibrating():\n            wait(10, MSEC)\n        self.orient.set_heading(initial_angle, DEGREES)\n        brain.timer.clear()\n    def _dispatch(self, left_speed, right_speed):\n        self._dt_left.set_velocity(left_speed, PERCENT)\n        self._dt_right.set_velocity(right_speed, PERCENT)\n    def drive4(self, inches, speed=100, timeout=3):\n        target = (inches/(math.pi*self.wheel_diameter))*self.gear_ratio\n        old_time = brain.timer.time(SECONDS)\n        BASE_VEL = 10\n\n        while (brain.timer.time(SECONDS) - old_time <= timeout) and ( abs(self._dt_left.position(TURNS)-target) >= 0.2 or abs(self._dt_right.position(TURNS)-target) >= 0.2 ):\n            left_error = abs(self._dt_left.position(TURNS)-target)/target\n            right_error = abs(self._dt_right.position(TURNS)-target)/target\n            dt_left_velocity = sign(left_error)*BASE_VEL + (speed-sign(left_error)*BASE_VEL) * left_error\n            dt_right_velocity = sign(right_error)*BASE_VEL + (speed-sign(right_error)*BASE_VEL) * right_error\n            self._dispatch(dt_left_velocity, dt_right_velocity)\n        self._dispatch(0,0)\n\n    def turn2(self, angle, speed=55, tolerance=1):\n        target = angle % 360\n        adjusted_error = tolerance + 1\n        BASE_VEL = 10\n\n        while abs(adjusted_error) > tolerance:\n            adjusted_error = target - self.orient.heading(DEGREES)\n            error = -abs(-adjusted_error if adjusted_error < 180 else 360-adjusted_error)/180\n            vel = sign(error)*BASE_VEL + (speed-sign(error)*BASE_VEL) * error\n            self._dispatch(vel, -vel)\n\n            wait(10, MSEC)\n        self._dispatch(0, 0)\n    def arc(self, rad, ang, speed=100, timeout=100):\n        WHEELBASE = 10.5\n        left_inches = (ang/360)*2*math.pi*(rad+WHEELBASE/2)\n        right_inches = (ang/360)*2*math.pi*(rad-WHEELBASE/2)\n        \n        left_target = (left_inches/(math.pi*self.wheel_diameter))*self.gear_ratio\n        right_target = (right_inches/(math.pi*self.wheel_diameter))*self.gear_ratio\n        self._dt_left.spin_for(FORWARD, left_target, TURNS)\n        self._dt_right.spin_for(FORWARD, right_target, TURNS)\n        # shared_target = (left_target+right_target)/2\n        # print(left_inches, right_inches)\n        # old_time = brain.timer.time(SECONDS)\n        # BASE_VEL = 10\n\n        # while (brain.timer.time(SECONDS) - old_time <= timeout) and ( abs(self._dt_left.position(TURNS)-left_target) >= 0.2 or abs(self._dt_right.position(TURNS)-right_target) >= 0.2 ):\n        #     left_error = abs(self._dt_left.position(TURNS)-left_target)/left_target\n        #     right_error = abs(self._dt_right.position(TURNS)-right_target)/right_target\n        #     dt_left_velocity = sign(left_error)*BASE_VEL + (speed-sign(left_error)*BASE_VEL) * left_error\n        #     dt_right_velocity = sign(right_error)*BASE_VEL + (speed-sign(right_error)*BASE_VEL) * right_error\n        #     print(left_error, right_error)\n        #     self._dispatch(dt_left_velocity, dt_right_velocity)\n        self._dispatch(0,0)\n\n    # driver control\n    def driver_control(self):\n        controller_1.buttonL2.pressed(cp.wings)\n        controller_1.buttonR2.pressed(cp.wings)\n\n        controller_1.buttonL1.pressed(lambda: cp.intake(None if cp.intake_value == FORWARD else FORWARD))\n        controller_1.buttonR1.pressed(lambda: cp.intake(None if cp.intake_value == REVERSE else REVERSE))\n\n        controller_1.buttonX.pressed(cp.catapult)\n        controller_1.buttonB.released(lambda: cp.catapult(None))\n        while True:\n            dt_left_speed = controller_1.axis3.position() - 0.5*controller_1.axis1.position()\n            dt_right_speed = controller_1.axis3.position() + 0.5*controller_1.axis1.position()\n        \n            self._dispatch(dt_left_speed, dt_right_speed)\n            wait(50, MSEC)\ndt = Drivetrain(0, 60/36, 3.25)\n\ndef autonomous():\n    # preloads - one will be in the intake, the other used as a preload per <RSC2>\n    dt.arc(6, 90, speed=20)\n\nautonomous()\ncompetition = Competition(dt.driver_control, autonomous)","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}