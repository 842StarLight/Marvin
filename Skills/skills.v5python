{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nimport time\nimport math\nimport random\n# Robot configuration\ncontroller_1 = Controller(PRIMARY)\n# drivetrain\ndt_left = MotorGroup(\n    Motor(Ports.PORT20, GearSetting.RATIO_6_1, True),\n    Motor(Ports.PORT19, GearSetting.RATIO_6_1, True),\n    Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\n)\ndt_right = MotorGroup(\n    Motor(Ports.PORT11, GearSetting.RATIO_6_1, False),\n    Motor(Ports.PORT12, GearSetting.RATIO_6_1, False),\n    Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)\n)\n\ndt_left.set_stopping(BRAKE) \ndt_right.set_stopping(BRAKE)\n# inertial & solenoid\norientation = Inertial(Ports.PORT1)\nwings = DigitalOut(brain.three_wire_port.a)\nendg = DigitalOut(brain.three_wire_port.b)\n# components\nintake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\ncatapult = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\n# initialize everything\n\n\norientation.calibrate()\nclass Components:\n    def __init__(self, cata_speed):\n        catapult.set_velocity(cata_speed, PERCENT)\n\n        self.wing_value = False\n\n        self.intake_value = None\n        intake.set_velocity(200, PERCENT)\n    def intake(self, direction):\n        if direction == None:\n            intake.stop()\n        else:\n            intake.spin(direction)\n        self.intake_value = direction\n    def catapult(self, direction=FORWARD):\n        if direction == None:\n            catapult.stop()\n        else:\n            catapult.spin(direction)\n    def wings(self):\n        self.wing_value = not self.wing_value\n        wings.set(self.wing_value)\n\n\nclass Drivetrain:\n    def __init__(self, gear_ratio, wheel_diameter, wheelbase):\n        self.gear_ratio = gear_ratio\n        self.wheel_diameter = wheel_diameter\n        self.wheelbase = wheelbase\n\n    def drive4(self, inches, speed=90, timeout=3):\n        dt_left.set_timeout(15)\n        dt_right.set_timeout(15)\n        dt_left.set_velocity(speed, PERCENT)\n        dt_right.set_velocity(speed, PERCENT)\n        direction = FORWARD if inches > 0 else REVERSE\n        dt_left.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        dt_right.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        \n        old_time = brain.timer.time(SECONDS)\n        while brain.timer.time(SECONDS) - old_time < timeout:\n            print(\"waiting\", dt_left.is_spinning(), dt_right.is_spinning())\n            # print(dt_left.is_done() , dt_left.is_spinning() , dt_left.velocity(PERCENT))\n            # print(dt_right.is_done() , dt_right.is_spinning() , dt_right.velocity(PERCENT))\n            if dt_left.is_done():\n                print(dt_left.is_done() , dt_left.is_spinning() , dt_left.velocity(PERCENT))\n                print(dt_right.is_done(), dt_right.is_spinning() , dt_right.velocity(PERCENT))\n                print(\"done waiting\")\n                break\n            wait(100, MSEC)\n\n        print(\"done waiting\", inches, brain.timer.time(SECONDS)-old_time)\n        # print(dt_left.is_done() , dt_left.is_spinning() , dt_left.velocity(PERCENT))\n        # print(dt_right.is_done() , dt_right.is_spinning() , dt_right.velocity(PERCENT))\n        \n        # wait(3, SECONDS)\n        # print(dt_left.is_done() , dt_left.is_spinning() , dt_left.velocity(PERCENT))\n        dt_left.stop()\n        dt_right.stop()\n\n    def turn2(self, angle_unmodded, speed=30):\n        angle = angle_unmodded % 360\n        while abs(angle - orientation.heading(DEGREES)) % 360 > 1:\n            h = orientation.heading(DEGREES)\n            #print(h)\n            dt_left.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_right.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_left.spin(FORWARD if (angle - h + 180) % 360 - 180 > 0 else REVERSE)\n            dt_right.spin(REVERSE if (angle - h + 180) % 360 - 180 > 0 else FORWARD)\n            wait(10, MSEC)\n        dt_left.stop()\n        dt_right.stop()\n        if abs(angle - orientation.heading(DEGREES)) % 360 > 1:\n            self.turn2(angle, speed=10)\n    def arc(self, rad, ang, speed=50):\n        # calculate targets\n        left_inches = (ang/360)*2*math.pi*(rad-self.wheelbase/2)\n        right_inches = (ang/360)*2*math.pi*(rad+self.wheelbase/2)\n        \n        left_target = (left_inches/(math.pi*self.wheel_diameter))*self.gear_ratio\n        right_target = (right_inches/(math.pi*self.wheel_diameter))*self.gear_ratio\n        \n        dt_left.set_velocity(speed*math.sqrt(left_target/right_target), PERCENT)\n        dt_right.set_velocity(speed*math.sqrt(right_target/left_target), PERCENT)\n\n        dt_left.spin_for(FORWARD, left_target, TURNS, wait=False)\n        dt_right.spin_for(FORWARD, right_target, TURNS)\n\ndt = Drivetrain(60/36, 3.25, 10.5)\ncp = Components(65)\n# driver control\ndef driver_control():\n    # # preloads - one will be in the intake, the other used as a preload per <RSC2>\n    # dt.drive4(12)\n    # dt.turn2(-20)\n    # dt.drive4(-14)\n    # # match loading\n    # cp.wings()\n    # cp.catapult()\n    # start driver controls\n    controller_1.buttonL2.pressed(cp.wings)\n    controller_1.buttonR2.pressed(cp.wings)\n\n    controller_1.buttonL1.pressed(lambda: cp.intake(None if cp.intake_value == FORWARD else FORWARD))\n    controller_1.buttonR1.pressed(lambda: cp.intake(None if cp.intake_value == REVERSE else REVERSE))\n\n    controller_1.buttonX.pressed(cp.catapult)\n    controller_1.buttonB.released(catapult.stop)\n\n    controller_1.buttonUp.pressed(lambda: endg.set(True))\n    controller_1.buttonDown.pressed(lambda: endg.set(False))\n    dt_left.spin(FORWARD)\n    dt_right.spin(FORWARD)\n    while True:\n        straight_speed = controller_1.axis3.position()\n        turn_speed = 0.5*controller_1.axis1.position()\n        dt_left.set_velocity(straight_speed + turn_speed, PERCENT)\n        dt_right.set_velocity(straight_speed - turn_speed, PERCENT)\n        wait(100, MSEC)\nwhile orientation.is_calibrating():\n    wait(10, MSEC)\nbrain.timer.clear()\norientation.set_heading(-90, DEGREES)\ndef autonomous():\n    # preloads - one will be in the intake, the other used as a preload per <RSC2>\n    dt.drive4(12)\n    dt.turn2(-20)\n    dt.drive4(-14)\n    print(orientation.heading(DEGREES))\n    # match loading\n    cp.wings()\n    cp.catapult()\n    wait(27500, MSEC)\n    controller_1.rumble('_._._._._.')\n    wait(3, SECONDS)\n    cp.catapult(None)\n    cp.wings()\n    print(orientation.heading(DEGREES))\n    # switch to offensive zone\n    dt.turn2(45)\n    dt.drive4(17)\n    dt.turn2(180)\n    dt.drive4(-33)\n    dt.turn2(180)\n    dt.drive4(-42)\n\n    # first smash (side) (starts at 180)\n    dt.turn2(180-35)\n    dt.drive4(-17)\n    dt.turn2(90+20)\n    dt.drive4(-18)\n    dt.turn2(90)\n    # second smash (angle 1) (skills 1.5 edition)\n    dt.turn2(135)\n    dt.drive4(22, speed=70)\n    dt.turn2(30)\n    cp.wings()\n    dt.drive4(-30, speed=40)\n    dt.turn2(125, speed=25)\n    dt.drive4(-26, speed=30)\n\n    # third smash (straight)\n    cp.wings()\n    dt.turn2(180)\n    dt.drive4(26)\n    cp.wings()\n    dt.turn2(180)\n    dt.drive4(-27, speed=70)\n    # fourth smash (angle 2)\n    cp.wings()\n    dt.drive4(20)\n    dt.turn2(90)\n    dt.drive4(-33)\n    cp.wings()\n    dt.turn2(180+35, speed=25)\n    dt.drive4(-40, speed=70)\n    dt.drive4(20, speed=200)\n    cp.wings()\n    print(brain.timer.time(MSEC))\ncompetition = Competition(driver_control, autonomous)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}