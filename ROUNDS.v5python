{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 12.953999999999999, 254, MM, 1.5)\nintake = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nCatapult = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\nendgame_motor_a = Motor(Ports.PORT7, GearSetting.RATIO_36_1, False)\nendgame_motor_b = Motor(Ports.PORT8, GearSetting.RATIO_36_1, True)\nendgame = MotorGroup(endgame_motor_a, endgame_motor_b)\ninertial_9 = Inertial(Ports.PORT21)\ngps = Gps(Ports.PORT20, 0.00, 0.00, MM, 180)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\nimport time\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\ncontroller = controller_1\ninertial = inertial_9\n# turns to a specified angle\ndef turn2(angle, speed=100):\n    while abs(angle - inertial.heading(DEGREES)) % 360 > 0.5:\n        h = inertial.heading(DEGREES)\n        drivetrain.set_turn_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n        #check = [angle - h, angle - h + 360, angle - h - 360]\n        #checkabs = [abs(i) for i in check]\n        #index = check[checkabs.index(min(checkabs))]\n        if (angle - h + 180) % 360 - 180 > 0:\n            drivetrain.turn(RIGHT)\n        else:\n            drivetrain.turn(LEFT)\n        wait(5, MSEC)\n    drivetrain.stop()\n# turns then drives, a very common thing in auton runloops\ndef turndrive(angle, inches, speed=50, first=True):\n    drivetrain.set_drive_velocity(speed, PERCENT)\n    def turndrive_drive():\n        if inches >= 0:\n            drivetrain.drive_for(FORWARD, inches)\n        else:\n            drivetrain.drive_for(REVERSE, inches)\n    def turndrive_turn():\n        turn2(angle, speed)\n    order = [turndrive_turn, turndrive_drive] if first else [turndrive_drive, turndrive_turn]\n    [n() for n in order]\n# intake controls\ncontroller.buttonL1.pressed(lambda: intake.spin(FORWARD))\ncontroller.buttonR1.pressed(lambda: intake.spin(REVERSE))\ncontroller.buttonL1.released(lambda: intake.stop())\ncontroller.buttonR1.released(lambda: intake.stop())\n\n# endgame controls\n\ncontroller.buttonL2.pressed(lambda: endgame.spin(FORWARD))\ncontroller.buttonR2.pressed(lambda: endgame.spin(REVERSE))\ncontroller.buttonL2.released(lambda: endgame.spin(FORWARD))\ncontroller.buttonR2.released(lambda: endgame.spin(REVERSE))\n\n# auton runloop\ndef started():\n    # set up sensors & actuators\n    intake.set_velocity(100, PERCENT)\n    inertial.calibrate()\n    inertial.set_heading(0, DEGREES)\n    inertial.set_rotation(0, DEGREES)\n    gps.calibrate()\n    \n    time.sleep(1)\n    print(time.time())\n    # main code\n    intake.spin(FORWARD)\n    # drive in front of goal and turn toward\n    turndrive(90, 48+24-7, first=False)\n    time.sleep(2)\n    # Ram into goal\n    intake.stop()\n    drivetrain.set_timeout(2, SECONDS)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.drive_for(FORWARD, 10000, INCHES)\n    # go back and pick up next ball\n    drivetrain.drive_for(REVERSE, 10, INCHES)\n    intake.spin(FORWARD)\n    turndrive(-90, 24)\n    time.sleep(1)\n    # turn back towards goal\n    turndrive(90, -24, first=False)\n    # Ram into goal\n    intake.stop()\n    drivetrain.set_timeout(2, SECONDS)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.drive_for(FORWARD, 10000, INCHES)\n    \n\n\n    print(time.time())\ndef goto(point, speed=50):\n    current_position = (gps.x_position(INCHES), gps.y_position(INCHES))\n    dx = point[0]-current_position[0]\n    dy = point[1]-current_position[1]\n    orientation_needed = (\n        360 + \n        ( ( math.degrees(math.atan(-dy/dx)) + 90 ) if dx > 0 else ( -math.degrees(math.atan(dy/dx)) - 90 ) )\n    ) % 360\n    distance_needed = math.sqrt(dx**2 + dy**2)\n    turndrive(orientation_needed, distance_needed, speed=speed)\n#started()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[1,2,3,4,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"72:48","direction":"rev","gyroType":"none","width":"0.51","unit":"in","wheelbase":"10","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[6],"name":"Catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7,8],"name":"endgame","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[21],"name":"inertial_9","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"gps","customName":true,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}