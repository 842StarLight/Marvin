{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"broadcast_msg\" id=\"-=_6b0c`sl4$qX1vw)XJ\">message1</variable><variable type=\"broadcast_msg\" id=\"NUV:_YwAW?~1]}V|Xx(4\">red_off</variable><variable type=\"broadcast_msg\" id=\":]0,Td2oK0UbT_yKe-28\">red_def</variable><variable type=\"broadcast_msg\" id=\"J{32Ms1$aP.@fQqG/cz%\">inertial</variable><variable type=\"broadcast_msg\" id=\"PYJBPz,N~Fq:Pg1@rXof\">hi</variable><variable id=\"IS3k,~j?ixxvH@Nn4J48\">catapult</variable><variable id=\"`)3xM^5S%kO6A1pv!00(\">degrees</variable><variable id=\"(E[Ab}}!p@v+%(GE=nuI\">difference</variable></variables><block type=\"procedures_definition\" id=\"nLBft[:yRq;^@eWcHZIX\" x=\"1150\" y=\"-470\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"qV;qq99/+quPbv+z(Q%v\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" proccode=\"turn2.0 %n\" proceduredefid=\"qV;qq99/+quPbv+z(Q%v\" argumentids=\"[&quot;~)C.dE9hfJ6_0E.=atvj&quot;]\" argumentnames=\"[&quot;to_degree&quot;]\" argumentdefaults=\"[&quot;todo&quot;,&quot;todo&quot;]\" argumenttypes=\"[&quot;n&quot;]\" warp=\"false\"></mutation><value name=\"~)C.dE9hfJ6_0E.=atvj\"><shadow type=\"argument_reporter_number\" id=\"kj_W$yojVA`F{tk(_-7R\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" funcname=\"turn2.0_to_degree\" argumentid=\"~)C.dE9hfJ6_0E.=atvj\" proceduredefid=\"qV;qq99/+quPbv+z(Q%v\"></mutation><field name=\"VALUE\">to_degree</field></shadow></value></shadow></statement><next><block type=\"v5_control_repeat_until\" id=\"X*30~WRlh(t{HcPixuOJ\"><value name=\"CONDITION\"><block type=\"v5_operator_less_than\" id=\"q!gfJfwG7yuXkl#Rha;)\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"ZP!0$TQ7((rrq4*POT{}\"><field name=\"NUM\">0</field></shadow><block type=\"v5_operator_function\" id=\"gu^Iw$CCB`O(o?y/k6*-\"><field name=\"OPERATOR\">abs</field><value name=\"NUM\"><shadow type=\"math_number\" id=\"4:fjF2s]*A]Ndr7:^f2n\"><field name=\"NUM\">0</field></shadow><block type=\"v5_operator_subtract\" id=\"brPqFaq;huvU9p,dV~G=\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"rET]Httqg/)xV-:3V*no\"><field name=\"NUM\">90</field></shadow><block type=\"argument_reporter_number\" id=\"ug;7b8I`koO_uU?oA=?~\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" funcname=\"turn2.0_to_degree\" argumentid=\"~)C.dE9hfJ6_0E.=atvj\" proceduredefid=\"qV;qq99/+quPbv+z(Q%v\"></mutation><field name=\"VALUE\">to_degree</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"IIC@0y(#R`grb_sQ.DtS\"><field name=\"NUM\">0</field></shadow><block type=\"v5_sensing_heading_of_gyro\" id=\"rRD,c!yVeI:scrMB[fuT\"><field name=\"GYRO\">Inertial9</field></block></value></block></value></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"C*a8a,z(%.5]6QBr-//q\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_drivetrain_set_turn_velocity\" id=\"*4QzWY/4N${k5#cz!+tc\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Y0X3sjTWbhK^#M%n+iW7\"><field name=\"NUM\">30</field></shadow><block type=\"v5_operator_add\" id=\"~(|)FV(E_*8%PFcaES%=\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"fiG[`{MMr?wQlQkBLSyd\"><field name=\"NUM\">0</field></shadow><block type=\"v5_operator_divide\" id=\"|1/!QUVKj5ntCmB}_T,M\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"ZOYU+bM0Q*it=Nen[pp7\"><field name=\"NUM\">0</field></shadow><block type=\"v5_operator_multiply\" id=\"H*2CdrB+/(tS9.Q(fY_1\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"V5DC7?+(-^)JmYrrS^Xb\"><field name=\"NUM\">0</field></shadow><block type=\"v5_operator_function\" id=\"01$WBN9L4S4P%+{RifRT\"><field name=\"OPERATOR\">abs</field><value name=\"NUM\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"v5_operator_subtract\" id=\"_JonFHDHXCqnB:PWWU$d\"><value name=\"NUM1\"><shadow type=\"math_number\"><field name=\"NUM\">90</field></shadow><block type=\"argument_reporter_number\" id=\"wbXe@$leZ5mIn-d.`SI(\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" funcname=\"turn2.0_to_degree\" argumentid=\"~)C.dE9hfJ6_0E.=atvj\" proceduredefid=\"qV;qq99/+quPbv+z(Q%v\"></mutation><field name=\"VALUE\">to_degree</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"v5_sensing_heading_of_gyro\" id=\"O*d^%2[sX+8ma88JaZ])\"><field name=\"GYRO\">Inertial9</field></block></value></block></value></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"*Sq}qh+Gf|PNP[%7]$Y@\"><field name=\"NUM\">100</field></shadow></value></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"UdX_.qp+Hv_awONh$?g!\"><field name=\"NUM\">360</field></shadow></value></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"SXM,M+/lv;yJGGbQmlGS\"><field name=\"NUM\">5</field></shadow></value></block></value><next><block type=\"v5_looks_print\" id=\"W`gvL,nr!{Yj3JS/r=Qo\"><field name=\"TARGET\">Console</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"c;a8u3/pD6M?fe5u:[1[\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_rotation_of_gyro\" id=\"Jh3BKx.}acHtRlnlRgbI\"><field name=\"GYRO\">Inertial9</field></block></value><next><block type=\"v5_looks_print\" id=\"(tsam@]od=^owv4}D-/V\"><field name=\"TARGET\">Console</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"*X!xhOmRRm)_R8*Urg]z\"><field name=\"TEXT\">   </field></shadow></value><next><block type=\"v5_control_if_then_else\" id=\"wG)(iy|L#Dv+5L)XXI2~\"><value name=\"CONDITION\"><block type=\"v5_operator_less_than\" id=\"qRbA[9B|]{a.t)z!md/P\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"[Kq^zBgy1V1-L:kmI1Al\"><field name=\"NUM\">90</field></shadow><block type=\"argument_reporter_number\" id=\"n|ey5.3=?#bJPU_9)e#u\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" funcname=\"turn2.0_to_degree\" argumentid=\"~)C.dE9hfJ6_0E.=atvj\" proceduredefid=\"qV;qq99/+quPbv+z(Q%v\"></mutation><field name=\"VALUE\">to_degree</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\",[0t-i-N[gA+_P|U.pM8\"><field name=\"NUM\">180</field></shadow><block type=\"v5_sensing_heading_of_gyro\" id=\"Twq+_IX|6)=5%+76g{xU\"><field name=\"GYRO\">Inertial9</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_drivetrain_turn\" id=\"K3#%^%i.KERnT;NgMdXG\"><field name=\"TURNDIRECTION\">right</field></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_drivetrain_turn\" id=\"P8+aK1U2?t2*NLcM?1V-\"><field name=\"TURNDIRECTION\">left</field></block></statement></block></next></block></next></block></next></block></statement><next><block type=\"v5_motion_stop_driving\" id=\"xw@}v3Xxv25.TH1#eHwu\"><next><block type=\"v5_looks_print\" id=\"v$iN3k)EUguI_~LCR]lH\"><field name=\"TARGET\">Console</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"Eq_4cC*!M-u.xqgis#Vh\"><field name=\"TEXT\">stopping</field></shadow></value></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"~zqtS@F]%z0OA.QSwG+q\" x=\"410\" y=\"-190\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonA</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"procedures_call\" id=\"vH`_7Hxc;e(Qz6p|!ip*\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" proccode=\"turn2.0 %n\" proceduredefid=\"qV;qq99/+quPbv+z(Q%v\" argumentids=\"[&quot;~)C.dE9hfJ6_0E.=atvj&quot;]\" warp=\"false\"></mutation><value name=\"~)C.dE9hfJ6_0E.=atvj\"><shadow type=\"math_number\" id=\"nEjSH2zW-4;iGEVLcF`2\"><field name=\"NUM\">90</field></shadow></value></block></next></block><block type=\"v5_sensing_calibrate_gyro\" id=\"*JrZe87b*[^q=KBFKd/Y\" x=\"630\" y=\"-30\"><field name=\"GYRO\">Inertial9</field><next><block type=\"v5_sensing_set_gyro_rotation\" id=\"Miw)xEyYAyOgym$}++2=\"><field name=\"GYRO\">Inertial9</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"SOXP{[q}8d|xO%sX4_0@\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"v5_sensing_set_gyro_heading\" id=\"4QFD9He,0J5o0k4;CnyV\"><field name=\"GYRO\">Inertial9</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"@JGcox0cu0kp1hZP#s#q\"><field name=\"NUM\">0</field></shadow></value></block></next></block></next></block><block type=\"v5_events_when_started\" id=\"?JLf3:1@d=q!*J%y_xZS\" x=\"430\" y=\"150\"><next><block type=\"v5_sensing_calibrate_gyro\" id=\"|RK+y:-D|!scs45mpGJn\"><field name=\"GYRO\">Inertial9</field><next><block type=\"v5_sensing_set_gyro_rotation\" id=\"0myN*CnJDx9s}8nS3RwA\"><field name=\"GYRO\">Inertial9</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"g0PBg,HHl;VLkY*peB40\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"v5_sensing_set_gyro_heading\" id=\"Ct`P-P,EP*{?3Kz#xn|L\"><field name=\"GYRO\">Inertial9</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"c)/e}U8,NUkWx:X+kryX\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"v5_control_forever\" id=\"[WVv92h}NgM)NkzxEt:C\"><statement name=\"SUBSTACK\"><block type=\"procedures_call\" id=\").-/u2Y_{r`n(]H@qY,Y\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" proccode=\"turn2.0 %n\" proceduredefid=\"qV;qq99/+quPbv+z(Q%v\" argumentids=\"[&quot;~)C.dE9hfJ6_0E.=atvj&quot;]\" warp=\"false\"></mutation><value name=\"~)C.dE9hfJ6_0E.=atvj\"><shadow type=\"math_number\" id=\"X3[Y7s:${ATTn%hfaw%Y\"><field name=\"NUM\">90</field></shadow></value></block></statement></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[1,2,3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"0.51","unit":"in","wheelbase":"10","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[6],"name":"Catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7,8],"name":"endgame","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[9],"name":"Inertial9","customName":false,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT3, ratio18_1, true);\nmotor rightMotorB = motor(PORT4, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 12.953999999999999, 254, mm, 1);\n\nmotor Intake = motor(PORT5, ratio18_1, false);\n\nmotor Catapult = motor(PORT6, ratio18_1, false);\n\nmotor endgameMotorA = motor(PORT7, ratio36_1, false);\nmotor endgameMotorB = motor(PORT8, ratio36_1, true);\nmotor_group endgame = motor_group(endgameMotorA, endgameMotorB);\n\ninertial Inertial9 = inertial(PORT9);\n\n\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_turn2_0_to_degree(double myblockfunction_turn2_0_to_degree__to_degree);\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat catapult, degrees2, difference;\n\nevent message1 = event();\nevent red_off = event();\nevent red_def = event();\nevent inertial = event();\nevent hi = event();\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToConsole_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Console_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// User defined function\nvoid myblockfunction_turn2_0_to_degree(double myblockfunction_turn2_0_to_degree__to_degree) {\n  while (!(fabs(static_cast<float>(myblockfunction_turn2_0_to_degree__to_degree - Inertial9.heading(degrees))) < 1.0)) {\n    Drivetrain.setTurnVelocity(((fabs(static_cast<float>(myblockfunction_turn2_0_to_degree__to_degree - Inertial9.heading(degrees))) * 100.0) / 360.0 + 5.0), percent);\n    printf(printToConsole_numberFormat(), static_cast<float>(Inertial9.rotation(degrees)));\n    printf(\"   \");\n    if (myblockfunction_turn2_0_to_degree__to_degree < Inertial9.heading(degrees)) {\n      Drivetrain.turn(right);\n    }\n    else {\n      Drivetrain.turn(left);\n    }\n  wait(5, msec);\n  }\n  Drivetrain.stop();\n  printf(\"stopping\");\n}\n\n// \"when Controller1 ButtonA pressed\" hat block\nvoid onevent_Controller1ButtonA_pressed_0() {\n  myblockfunction_turn2_0_to_degree(90.0);\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Inertial9.startCalibration();\n  while (Inertial9.isCalibrating()) { task::sleep(50); }\n  Inertial9.setRotation(0.0, degrees);\n  Inertial9.setHeading(0.0, degrees);\n  while (true) {\n    myblockfunction_turn2_0_to_degree(90.0);\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // register event handlers\n  Controller1.ButtonA.pressed(onevent_Controller1ButtonA_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}