{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nimport time\nimport math\nimport random\n# Robot configuration\ncontroller_1 = Controller(PRIMARY)\n# drivetrain\ndt_left = MotorGroup(Motor(Ports.PORT19, GearSetting.RATIO_6_1, True), Motor(Ports.PORT20, GearSetting.RATIO_6_1, True))\ndt_right = MotorGroup(Motor(Ports.PORT11, GearSetting.RATIO_6_1, False), Motor(Ports.PORT12, GearSetting.RATIO_6_1, False))\n# inertial & solenoid\norientation = Inertial(Ports.PORT1)\nwings = DigitalOut(brain.three_wire_port.a)\n# components\nintake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nendgame = MotorGroup(Motor(Ports.PORT15, GearSetting.RATIO_18_1, True), Motor(Ports.PORT16, GearSetting.RATIO_18_1, False))\ncatapult = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n\nintake.set_velocity(200, PERCENT)\n# braking for auton\ndt_left.set_stopping(HOLD)\ndt_right.set_stopping(HOLD)\n# initialize everything\nwait(300, MSEC)\nprint(\"\\033[2J\")\norientation.calibrate()\ntime.sleep(2)\n# HEADING IS 180!! (12/25)\norientation.set_rotation(180, DEGREES)\norientation.set_heading(180, DEGREES)\nclass Components:\n    def __init__(self, endgame_ratio, cata_speed):\n        self.endgame_ratio = endgame_ratio\n        catapult.set_velocity(cata_speed, PERCENT)\n        self.wing_value = False\n        self.intake_value = None\n        wings.set(False)\n    def intake(self, direction):\n        if direction == None:\n            intake.stop()\n        else:\n            intake.spin(direction)\n        self.intake_value = direction\n    def endgame(self, direction, amount=None):\n        endgame.set_velocity(100 if direction == REVERSE else 200, PERCENT)\n        if direction == None:\n            endgame.stop()\n        elif amount == None:\n            endgame.spin(direction)\n        else:\n            d = FORWARD if ((1 if direction == FORWARD else -1)*(1 if amount>=0 else -1)) == 1 else REVERSE\n            endgame.spin_for(d, abs(amount)*self.endgame_ratio, TURNS)\n    def catapult(self, direction=FORWARD, amount=None):\n        if direction == None:\n            catapult.stop()\n        elif amount == None:\n            catapult.spin(direction)\n        else:\n            d = FORWARD if ((1 if direction == FORWARD else -1)*(1 if amount>=0 else -1)) == 1 else REVERSE\n            catapult.spin_for(d, abs(amount)*self.endgame_ratio, TURNS)\n    def wings(self):\n        self.wing_value = False if self.wing_value else True\n        wings.set(self.wing_value)\n\nclass Drivetrain:\n\n    def __init__(self, gear_ratio, wheel_diameter):\n        self.gear_ratio = gear_ratio\n        self.wheel_diameter = wheel_diameter\n\n    def drive4(self, inches, speed=100, timeout=15):\n        dt_left.set_timeout(15)\n        dt_right.set_timeout(15)\n\n        dt_left.set_velocity(speed/2, PERCENT)\n        dt_right.set_velocity(speed/2, PERCENT)\n        direction = FORWARD if inches > 0 else REVERSE\n        dt_left.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        dt_right.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        old_time = brain.timer.time(SECONDS)\n\n        while dt_left.is_spinning() and dt_right.is_spinning():\n            if brain.timer.time(SECONDS)-old_time >= timeout:\n                dt_left.stop()\n                dt_right.stop()\n\n    def turn2(self, angle_unmodded, speed=40):\n        angle = angle_unmodded % 360\n        while abs(angle - orientation.heading(DEGREES)) % 360 > 0.5:\n            h = orientation.heading(DEGREES)\n            print(h)\n            dt_left.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_right.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_left.spin(FORWARD if (angle - h + 180) % 360 - 180 > 0 else REVERSE)\n            dt_right.spin(REVERSE if (angle - h + 180) % 360 - 180 > 0 else FORWARD)\n            wait(10, MSEC)\n        dt_left.stop()\n        dt_right.stop()\n        if abs(angle - orientation.heading(DEGREES)) % 360 > 0.5:\n            self.turn2(angle, speed=10)\n            \ndt = Drivetrain(60/36, 3.25)\ncp = Components(80/12, 60)\n# driver control\ndef driver_control():\n    controller_1.buttonL2.pressed(cp.wings)\n    controller_1.buttonR2.pressed(cp.wings)\n\n    controller_1.buttonL1.pressed(lambda: cp.intake(None if cp.intake_value == FORWARD else FORWARD))\n    controller_1.buttonR1.pressed(lambda: cp.intake(None if cp.intake_value == REVERSE else REVERSE))\n\n    controller_1.buttonUp.pressed(lambda: cp.endgame(FORWARD))\n    controller_1.buttonDown.pressed(lambda: cp.endgame(REVERSE))\n    controller_1.buttonUp.released(endgame.stop)\n    controller_1.buttonDown.released(endgame.stop)\n\n    controller_1.buttonX.pressed(cp.catapult)\n    controller_1.buttonB.released(catapult.stop)\n\n    controller_1.buttonA.pressed(lambda: dt.turn2(sorted([0, 90, 180, 270, 360], key=lambda x: abs(x-orientation.heading(DEGREES)))[0]))\n    controller_1.buttonY.pressed(lambda: dt.turn2(sorted([0, 90, 180, 270, 360], key=lambda x: abs(x-orientation.heading(DEGREES)))[0]))\n    cata_speed=60\n    cata_acceleration=0\n    while True:\n        if controller_1.buttonRight.pressing():\n            cata_acceleration += 0.025\n        elif controller_1.buttonLeft.pressing():\n            cata_acceleration -= 0.025\n        else:\n            cata_acceleration = 0\n        cata_speed += cata_acceleration\n\n        controller_1.screen.set_cursor(1, 1)\n        controller_1.screen.print(int(cata_speed))\n\n        catapult.set_velocity(cata_speed, PERCENT)\n        \n        dt_left_speed = controller_1.axis3.position() + 0.5*controller_1.axis1.position()\n        dt_left.set_velocity(abs(dt_left_speed), PERCENT)\n        dt_left_dir = FORWARD if dt_left_speed >= 0 else REVERSE\n\n\n        dt_right_speed = controller_1.axis3.position() - 0.5*controller_1.axis1.position()\n        dt_right.set_velocity(abs(dt_right_speed), PERCENT)\n        dt_right_dir = FORWARD if dt_right_speed >= 0 else REVERSE\n        \n        dt_left.spin(dt_left_dir)\n        dt_right.spin(dt_right_dir)\n\n        wait(50, MSEC)\n\ndef autonomous_3_no_wings():\n    #initialization\n    dt_left.set_stopping(BRAKE)\n    dt_right.set_stopping(BRAKE)\n    brain.timer.clear()\n\n    #push alliance triball into goal\n    dt.drive4(52)\n    dt.turn2(90)\n    cp.intake(REVERSE)\n    dt.drive4(6)\n    dt.drive4(-2)\n\n    #easy triball\n    dt.turn2(270)\n    cp.intake(FORWARD)\n    dt.drive4(5)\n    dt.turn2(90)\n    cp.intake(REVERSE)\n    cp.wings()\n    dt.drive4(7)\n    dt.drive4(-7)\n\n    #IMPOSSIBLE triball\n    cp.wings()\n    dt.turn2(270)\n    cp.intake(FORWARD)\n    dt.drive4(25,timeout=1)\n    dt.turn2(90)\n    cp.intake(REVERSE)\n    cp.wings()\n    dt.drive4(48,timeout=1)\n\n    #LESSIMPOSSIBLE triball\n    dt.drive4(-24)\n    cp.wings()\n    cp.intake(None)\n    dt.turn2(180)\n    dt.drive4(20)\n    dt.turn2(270)\n    cp.intake(FORWARD)\n    dt.drive4(10, timeout=1)\n    dt.drive4(-12)\n    dt.turn2(0)\n    dt.drive4(20)\n    cp.wings()\n    dt.turn2(90)\n    cp.intake(REVERSE)\n    dt.drive4(50,timeout=1)\n    cp.intake(None)\n    dt.drive4(-30,timeout=1)\n    cp.wings()\n\n    #print time\n    brain.screen.print(brain.timer.time(SECONDS))\n\n#CONFIRTM THIS:\n#first angle- 140\n#second angle- 50\n\ndef autonomous_4_no_wings():\n\n    #initialization\n    dt_left.set_stopping(COAST)\n    dt_right.set_stopping(COAST)\n    brain.timer.clear()\n\n    #auton code\n    dt.drive4(42)\n    dt.turn2(-90)\n    intake.spin(REVERSE)\n    dt.drive4(7)\n    dt.turn2(-90)\n    dt.drive4(-24)\n    dt.turn2(140)\n    cp.intake(FORWARD)\n    dt.drive4(8.5)\n    dt.turn2(90)\n    dt.drive4(-3,50,timeout=1)\n    dt.turn2(90)\n    dt.drive4(-36,timeout=1)\n    dt.drive4(5)\n    dt.turn2(-90)\n    dt.drive4(7, timeout=1)\n    cp.intake(None)\n    dt.drive4(-15)\n    dt.turn2(50)\n    cp.intake(FORWARD)\n    dt.drive4(25)\n    dt.turn2(50)\n    dt.drive4(-20)\n    dt.turn2(-90)\n    cp.intake(REVERSE)\n    dt.drive4(19, timeout=1, speed=200)\n    dt.drive4(-10)\n    cp.intake(None)\n\n    #print time\n    brain.screen.print(brain.timer.time(SECONDS))\n\ndef autonomous_5_wings():\n    dt_left.set_stopping(COAST)\n    dt_right.set_stopping(COAST)\n    brain.timer.clear()\n\n    cp.wings()\n    dt.drive4(3)\n    dt.turn2(147)\n    cp.wings()\n    cp.intake(FORWARD) #intake\n    dt.drive4(60)\n    dt.turn2(90)\n    dt.drive4(1)\n    dt.drive4(-3,50)\n    dt.turn2(90)\n    dt.drive4(-38,speed=75,timeout=1)\n    dt.drive4(6)\n    dt.turn2(-90,speed=20)\n    cp.intake(REVERSE) #outtake\n    dt.drive4(6, timeout=1)\n    cp.intake(None)\n    dt.turn2(-90)\n    dt.drive4(-6)\n    dt.turn2(54)\n    cp.intake(FORWARD) #intake\n    dt.drive4(20)\n    dt.turn2(-50)\n    dt.drive4(20)\n    cp.intake(REVERSE)\n\n    brain.screen.print(brain.timer.time())\n\n\n\n#autonomous_4_no_wings()\n#driver_control()\ncompetition = Competition(autonomous_4_no_wings,driver_control)","textLanguage":"python","rconfig":[],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}