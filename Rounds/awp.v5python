{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nimport time\nimport math\nimport random\n# constants\nOPEN = True\nCLOSE = False\n# controller\ncontroller_1 = Controller(PRIMARY)\n# logging explanation\ncontroller_1.screen.set_cursor(1, 1)\ncontroller_1.screen.print(\"DT Temps\")\n\ncontroller_1.screen.set_cursor(2, 1)\ncontroller_1.screen.print(\"Cata\")\n\ncontroller_1.screen.set_cursor(3, 1)\ncontroller_1.screen.print(\"Inertial\")\n# drivetrain\ndt_right = MotorGroup(\n    Motor(Ports.PORT20, GearSetting.RATIO_6_1, False),\n    Motor(Ports.PORT19, GearSetting.RATIO_6_1, False),\n    Motor(Ports.PORT18, GearSetting.RATIO_6_1, False)\n)\ndt_left = MotorGroup(\n    Motor(Ports.PORT11, GearSetting.RATIO_6_1, True),\n    Motor(Ports.PORT12, GearSetting.RATIO_6_1, True),\n    Motor(Ports.PORT13, GearSetting.RATIO_6_1, True)\n)\ndt_left.set_stopping(BRAKE) \ndt_right.set_stopping(BRAKE)\n# components\nintake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\ncatapult = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\n# solenoids\nwings = DigitalOut(brain.three_wire_port.a)\nendg = DigitalOut(brain.three_wire_port.b)\n# sensors\ndist = Distance(Ports.PORT2)\n\norientation = Inertial(Ports.PORT1)\norientation.calibrate()\nwhile orientation.is_calibrating():\n    wait(10, MSEC)\nprint(brain.timer.time(MSEC), \"Inertial calibrated\")\nbrain.timer.clear()\n\"\"\"\nTODO:\nSwitch to default drivetrain class\nDitch components class\nRemove drivetrain class and broaden dt functions' scope\nRewrite driver controls through arcade\n\"\"\"\n\nclass Components:\n    def __init__(self, cata_speed):\n        catapult.set_velocity(cata_speed, PERCENT)\n        intake.set_velocity(200, PERCENT)\n\n        self.wing_value = False\n\n        self.intake_value = None\n    def intake(self, direction):\n        if direction == None:\n            intake.stop()\n        else:\n            intake.spin(direction)\n        self.intake_value = direction\n    def catapult(self, direction=FORWARD):\n        if direction == None:\n            catapult.stop()\n        else:\n            catapult.spin(direction)\n    def wings(self, value=None):\n        if value == None:\n            self.wing_value = not self.wing_value\n        else:\n            self.wing_value = value\n        wings.set(self.wing_value)\n\nclass Drivetrain:\n    def __init__(self, gear_ratio, wheel_diameter, wheelbase):\n        self.gear_ratio = gear_ratio\n        self.wheel_diameter = wheel_diameter\n        self.wheelbase = wheelbase\n\n    def _drive4(self, inches, speed=10, timeout=100):\n        direction = FORWARD if inches > 0 else REVERSE\n        dt_left.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        dt_right.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        print('starting n_d')\n        # baseline measurements\n        print('starting n_d')\n        initial_time = brain.timer.time(SECONDS)\n        initial_dist = dist.object_distance(INCHES)\n        running = True\n        # ready, set, go!\n        print('starting n_d')\n        direction = FORWARD if inches > 0 else REVERSE\n        dt_left.spin(direction)\n        dt_right.spin(direction)\n        # feedback loop\n        print('starting n_d')\n        print(brain.timer.time(SECONDS)-initial_time)\n        while running and brain.timer.time(SECONDS) - initial_time <= timeout:\n            read = dist.object_distance(INCHES)\n            error = abs((read-initial_dist)-inches)/inches # -1≤inches≤1\n            print(read, error)\n            dt_left.set_velocity(error * speed, PERCENT)\n            dt_right.set_velocity(error * speed, PERCENT)\n            if error <= 0.005:\n                print('STOPPING WAAAAHHH')\n                running = False\n        # stop it all!\n        dt_left.stop()\n        dt_right.stop()\n    def drive4(self, inches, speed=90, timeout=3):\n        dt_left.set_timeout(15)\n        dt_right.set_timeout(15)\n        dt_left.set_velocity(speed, PERCENT)\n        dt_right.set_velocity(speed, PERCENT)\n        direction = FORWARD if inches > 0 else REVERSE\n        dt_left.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        dt_right.spin_for(direction, (abs(inches)/(math.pi*self.wheel_diameter))*self.gear_ratio, TURNS, wait=False)\n        \n        old_time = brain.timer.time(SECONDS)\n        print(\"drive4/waiting \\t\")\n        while brain.timer.time(SECONDS) - old_time < timeout:\n            print(int(dt_left.is_spinning()), int(dt_right.is_spinning()), int(dt_left.velocity(PERCENT)), end=\"\\t\")\n            if dt_left.is_done():\n                break\n            wait(10, MSEC)\n        print(\"\\ndrive4/done\", inches, \"in, took\", brain.timer.time(SECONDS)-old_time, \"sec\")\n        dt_left.stop()\n        dt_right.stop()\n    def turn2(self, angle_unmodded, speed=30):\n        angle = angle_unmodded % 360\n        h=angle+100\n        while abs(angle - h) % 360 > 1:\n            h = orientation.heading(DEGREES)\n            dt_left.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_right.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_left.spin(FORWARD if (angle - h + 180) % 360 - 180 > 0 else REVERSE)\n            dt_right.spin(REVERSE if (angle - h + 180) % 360 - 180 > 0 else FORWARD)\n            wait(10, MSEC)\n        dt_left.stop()\n        dt_right.stop()\n        if abs(angle - orientation.heading(DEGREES)) % 360 > 1:\n            self.turn2(angle, speed=10)\n    def arc_new(self,left_speed, right_speed,duration):\n        dt_right.set_velocity(right_speed, PERCENT)\n        dt_left.set_velocity(left_speed, PERCENT)\n        dt_right.spin(FORWARD)\n        dt_left.spin(FORWARD)\n        wait(duration, SECONDS)\n        dt_left.stop()\n        dt_right.stop()\n\n    def arc(self, rad, ang, head=FORWARD, side=RIGHT, speed=25, timeout=5):\n        \"\"\"\n        Inputs:\n        rad (>0): Radius of arc, in inches\n        ang (>0): Angle of arc, in degrees\n        head (FORWARD/REVERSE): whether the robot is moving for/backwards\n        side (LEFT/RIGHT): which side the robot is arc towards\n        \"\"\"\n        # constants\n        aside = 1 if side == RIGHT else -1\n\n        dt_const = self.gear_ratio/(math.pi*self.wheel_diameter) # multiply to get # of turns\n        in_const = (ang/360)*2*math.pi # multiply to get # of inches\n        # targets for each side\n        left = dt_const*in_const*(rad+aside*self.wheelbase/2) # the parenthesized portion is the abs value\n        right = dt_const*in_const*(rad-aside*self.wheelbase/2) # of the circumference of the side's circle\n        # velocities\n        dt_left.set_velocity(speed*math.sqrt(left/right), PERCENT)\n        dt_right.set_velocity(speed*math.sqrt(right/left), PERCENT)\n        # spin!\n        dt_right.spin_for(head, right, TURNS, wait=False)\n        dt_left.spin_for(head, left, TURNS, wait=False)\n        # timeout routine\n        old_time = brain.timer.time(SECONDS)\n        while brain.timer.time(SECONDS) - old_time < timeout:\n            if dt_left.is_done():\n                break\n            wait(10, MSEC)\n        dt_left.stop()\n        dt_right.stop()\ndt = Drivetrain(60/36, 3.25, 11)\ncp = Components(80)\nmangle = 20\n# helper functions\ndef matchload_setup():\n    dt.drive4(12)\n    dt.turn2(180-mangle)\n    dt.drive4(12)\n    dt.drive4(2.5, speed=25)\n    print(orientation.heading(DEGREES))\n    # match loading\n    cp.catapult()\n    initial_time = brain.timer.time(SECONDS)\n    dt.turn2(180-mangle)\n# driver control\ndef driver_control():\n    # core archie setup\n    def print_all(msg):\n        controller_1.screen.clear_screen()\n        for i in range(3):\n            controller_1.screen.set_cursor(i+1,1)\n            controller_1.screen.print(msg)\n    log_n = 0 # a var to keep track of segregated logging\n    # skills mode + matchloading setup\n    hang_n = 10\n    skills = False\n    if controller_1.buttonY.pressing() or controller_1.buttonA.pressing():\n        skills = True\n        controller_1.rumble('-.-.-.')\n        print_all('SKILLS MODE')\n        orientation.set_heading(270, DEGREES)\n        matchload_setup()\n    # cp controls\n    controller_1.screen.clear_screen()\n    controller_1.buttonL2.pressed(cp.wings)\n    controller_1.buttonR2.pressed(cp.wings)\n\n    controller_1.buttonL1.pressed(lambda: cp.intake(None if cp.intake_value == FORWARD else FORWARD))\n    controller_1.buttonR1.pressed(lambda: cp.intake(None if cp.intake_value == REVERSE else REVERSE))\n\n    controller_1.buttonX.pressed(cp.catapult)\n    controller_1.buttonB.released(catapult.stop)\n\n    controller_1.buttonUp.pressed(lambda: endg.set(True))\n    controller_1.buttonDown.pressed(lambda: endg.set(False))\n    # ready, set, drive!\n    brain.timer.clear()\n    while True:\n        wait(10, MSEC)\n        # dt controls\n        straight_speed = controller_1.axis3.position()\n        turn_speed = 0.5*controller_1.axis1.position()\n        l = straight_speed + turn_speed\n        r = straight_speed - turn_speed\n        dt_left.spin((FORWARD if l >= 0 else REVERSE), abs(l)*12/100, VOLT)\n        dt_right.spin((FORWARD if r >= 0 else REVERSE), abs(r)*12/100, VOLT)\n        # logging\n        logs = [\n            \"time: %g\" % brain.timer.time(SECONDS),\n            \"dt: %d %d\" % (dt_left.temperature(PERCENT), dt_right.temperature(PERCENT)),\n            \"cata: %d\" % catapult.temperature(PERCENT),\n        ]\n        controller_1.screen.set_cursor(1 + log_n % 3, 1)\n        controller_1.screen.print(logs[log_n % 3])\n        log_n += 1\n        # hang mode\n        if brain.timer.time(SECONDS) > 50 and skills and hang_n > 0:\n            if hang_n == 10:\n                controller_1.rumble('-.-.-.')\n                endg.set(True)\n            print_all('HANG MODE')\n            hang_n -= 1\n            if hang_n == 0:\n                controller_1.screen.clear_screen()\n\ndef awp():\n    brain.timer.clear()\n    orientation.set_heading(270, DEGREES)\n    \n    def checkTime():\n        print(brain.timer.time(SECONDS))\n        brain.screen.print(brain.timer.time(SECONDS))\n\n    # setup (again)\n    dt.drive4(2)\n\n    # take out match load bar triball\n    cp.intake(FORWARD)\n    cp.wings(OPEN)\n    wait(0.5, SECONDS)\n    dt.turn2(180,speed=50)\n    cp.wings(CLOSE)\n\n    # turn and outtake preload \n    dt.turn2(225)\n    dt.drive4(14)\n    dt.turn2(270)\n    dt.drive4(3)\n    cp.intake(REVERSE)\n    wait(500,MSEC)\n\n    # turn around and push preload\n    dt.drive4(-3)\n    cp.intake(None)\n    dt.turn2(90)\n    dt.drive4(-5)\n\n    # touch elevation\n    dt.drive4(2)\n    dt.turn2(180)\n    dt.drive4(-10,speed=30)\n    dt.turn2(180)\n    dt.drive4(-38,speed=30)\n    cp.wings(OPEN)\n    dt.turn2(168)\n\n    checkTime()\n\ncompetition = Competition(driver_control, awp)","textLanguage":"python","rconfig":[],"slot":3,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}